version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  aws-ecr: circleci/aws-ecr@7.2.0

parameters:
  skip-build:
    type: boolean
    default: false
    description: should skip build workflow
  create-cluster:
    type: boolean
    default: false
    description: create new cluster if true
  deploy-cluster:
    type: boolean
    default: false
    description: continue deploy to cluster

commands:
  install-eksctl:
    steps:
      - run:
          name: Install the eksctl tool
          description: |
            Fixed version of install-eksctl command, which have incorrect eksctl download url
            Original version: https://github.com/CircleCI-Public/aws-eks-orb/blob/master/src/commands/install-eksctl.yml
            Should be fixed in orb circleci/aws-eks@2.0.0
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi

            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download


jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: Lint
          command: |
            make all
  check-if-cluster-exists:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster to be checked
        type: string
    steps:
      - install-eksctl
      - run:
          shell: /bin/bash
          name: Determine if a cluster creation is needed
          command: |
            CLUSTER_VAR="<< parameters.cluster-name >>"
            CLUSTER_NOT_EXIST=$(eksctl get cluster $CLUSTER_VAR 2>&1 >/dev/null )

            echo "CIRCLECI_API_KEY - $CIRCLECI_API_KEY"
            echo "CIRCLE_PROJECT_USERNAME - $CIRCLE_PROJECT_USERNAME"
            echo "CIRCLE_PROJECT_REPONAME - $CIRCLE_PROJECT_REPONAME"
            echo "CIRCLE_BRANCH - $CIRCLE_BRANCH"

            if [ ! -z "$CLUSTER_NOT_EXIST" ]; then
              printf "\nTriggering create-cluster workflow\n"
                            curl -X POST --url https://circleci.com/api/v2/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
                --header "Content-Type: application/json" \
                --header "Circle-Token: ${CIRCLECI_API_KEY}" \
                --data '{ "branch": "'"$CIRCLE_BRANCH"'", "parameters": { "skip-build": true, "create-cluster": true } }'
            else
              printf "\nTriggering deploy workflow\n"
              curl -X POST --url https://circleci.com/api/v2/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
                --header "Content-Type: application/json" \
                --header "Circle-Token: ${CIRCLECI_API_KEY}" \
                --data '{ "branch": "'"$CIRCLE_BRANCH"'", "parameters": { "skip-build": true, "deploy-cluster": true } }'
            fi

  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster to be created
        type: string
        default: ''
    steps:
      - install-eksctl
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          verbose: 4
          tags: "Project=UdacityCapstone"
          node-type: "t2.micro"
          nodes-max: 2
          ssh-access: true
          ssh-public-key: "udacity_aws"
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
  go-to-deployment-workflow:
    executor: aws-eks/python3
    steps:
      - run:
          name: Start deploy workflow
          command: |
            curl -X POST --url https://circleci.com/api/v2/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
                            --header "Content-Type: application/json" \
                            --header "Circle-Token: ${CIRCLECI_API_KEY}" \
                            --data '{ "branch": "'"$CIRCLE_BRANCH"'", "parameters": { "skip-build": true, "deploy-cluster": true } }'
  start-deployment:
    executor: aws-eks/python3
    steps:
      - run:
          name: Start deployment
          command: |
            echo "SUCCESS"
  delete-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster to be deleted
        type: string
    steps:
      - install-eksctl
      - aws-eks/delete-cluster:
          cluster-name: << parameters.cluster-name >>
          verbose: 4

workflows:
  build:
    unless: << pipeline.parameters.skip-build >>
    jobs:
      - lint
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
          repo: 'udacity-devops-capstone'
          skip-when-tags-exist: false
          create-repo: true
          tag: 'latest,${CIRCLE_WORKFLOW_ID}'
          requires:
            - lint
      - check-if-cluster-exists:
          cluster-name: udacity-devops-capstone-cluster
          requires:
            - aws-ecr/build-and-push-image
  create-cluster:
    when: << pipeline.parameters.create-cluster >>
    jobs:
      - create-cluster:
          cluster-name: udacity-devops-capstone-cluster
      - test-cluster:
          cluster-name: udacity-devops-capstone-cluster
          requires:
            - create-cluster
      - go-to-deployment-workflow:
          requires:
            - test-cluster
      - approve-cluster-destroy:
          type: approval
          requires:
            - test-cluster
      - delete-cluster:
          cluster-name: udacity-devops-capstone-cluster
          requires:
            - approve-cluster-destroy
  deployment:
    when: << pipeline.parameters.deploy-cluster >>
    jobs:
      - approve-deployment:
          type: approval
      - start-deployment:
          requires:
            - approve-deployment